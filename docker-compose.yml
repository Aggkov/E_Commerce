services:
  postgres-core:
    image: postgres:16
    container_name: core_postgres_db
    environment:
      POSTGRES_DB: e-commerce
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_user
    ports:
      - "5432:5432"  # Maps port 5432 on your machine to port 5432 in the container, diff containers can run on same port since they run on diff network instances
    volumes:
      - ./backend/core-service/core-postgres-data:/var/lib/postgresql/data  # Persists data on local filesystem

  flyway:
    image: flyway/flyway:latest
    container_name: flyway_migration
    depends_on:
      - postgres-core
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres-core:5432/e-commerce  # Point to the postgres service
      FLYWAY_USER: ecommerce_user
      FLYWAY_PASSWORD: ecommerce_user
      # This argument specifies where Flyway should look for migration scripts.
      # filesystem:/flyway/sql tells Flyway to use the directory /flyway/sql inside the container as the location of migration files.
    command: -locations=filesystem:/flyway/sql migrate
    volumes:
      - ./backend/core-service/src/main/resources/sql/migration:/flyway/sql  #Adjust to relative path of SQL files

  # Payment service PostgreSQL container
  postgres-payment:
    image: postgres:16
    container_name: payment_postgres_db
    environment:
      POSTGRES_DB: payment_db  # Payment database name
      POSTGRES_USER: payment_user
      POSTGRES_PASSWORD: payment_user
    ports:
      - "5433:5432"  # Maps localhost:5433 to container's port 5432
    volumes:
      - ./backend/payment-service/payment-postgres-data:/var/lib/postgresql/data

  keycloak:
    container_name: keycloak-e_commerce
    image: quay.io/keycloak/keycloak:25.0.5
    ports:
      - "9090:8443" #Map Docker's internal HTTPS port 8443 to localhost 9090
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm-export.json
      KC_IMPORT_REALM: true
      KC_HTTPS_KEY_STORE_FILE: /opt/keycloak/conf/keycloak.p12 #specifies the path to the keystore inside the container
      KC_HTTPS_KEY_STORE_PASSWORD: changeit
      KC_HOSTNAME: localhost
      # docker
      #      KC_HOSTNAME: keycloak
      JAVA_OPTS: >
        -Djavax.net.ssl.trustStore=/app/custom-truststore.jks
        -Djavax.net.ssl.trustStorePassword=changeit
    volumes:
      - ./keycloak.p12:/opt/keycloak/conf/keycloak.p12 #mount keycloak-keystore.p12 inside container
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json # Mount realm-export.json inside container
      - ./custom-truststore.jks:/app/custom-truststore.jks
    #      - ./local-ca.crt:/app/local-ca.crt  # Mount local-ca.crt to a known path inside the container
    command:
      - "start-dev"
      - "--import-realm"
  #    entrypoint: >
  #      sh -c "
  #      chmod u+w /usr/lib/jvm/java-21-openjdk-21.0.4.0.7-1.el9.x86_64/lib/security/cacerts &&
  #      keytool -import -trustcacerts -alias local-ca -file /app/local-ca.crt -cacerts -storepass changeit -noprompt &&
  #      chmod u-w /usr/lib/jvm/java-21-openjdk-21.0.4.0.7-1.el9.x86_64/lib/security/cacerts &&
  #      start-dev --import-realm"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 2097152
    ports:
      - "9092:9092"
      - "29092:29092"

  ## Eureka Server
  discovery-server:
    image: aggkov/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JAVA_OPTS: >
        -Djavax.net.ssl.trustStore=/app/custom-truststore.jks
        -Djavax.net.ssl.trustStorePassword=changeit
        -Djavax.net.debug=ssl
    volumes:
      - ./backend/discovery-server/src/main/resources/certs/discovery-server.p12:/certs/discovery-server.p12  # SSL certificates
      - ./custom-truststore.jks:/app/custom-truststore.jks
      - ./local-ca.crt:/app/local-ca.crt
    entrypoint: >
      sh -c "
      if ! keytool -list -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit -alias local-ca >/dev/null 2>&1; then
      keytool -import -trustcacerts -alias local-ca -file /app/local-ca.crt -cacerts -storepass changeit -noprompt;
      fi &&
      java -cp @/app/jib-classpath-file com.ecommerce.discoveryserver.DiscoveryServerApplication"

  api-gateway:
    image: aggkov/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
#    expose:
#      - "8080"
    depends_on:
      - discovery-server
      - keycloak
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JAVA_OPTS: >
        -Djavax.net.ssl.trustStore=/app/custom-truststore.jks
        -Djavax.net.ssl.trustStorePassword=changeit
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    volumes:
      - ./backend/api-gateway/src/main/resources/certs/api-gateway.p12:/certs/api-gateway.p12  # SSL certificates
      - ./custom-truststore.jks:/app/custom-truststore.jks
      - ./local-ca.crt:/app/local-ca.crt  # Mount local-ca.crt
    entrypoint: >
      sh -c "
      if ! keytool -list -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit -alias local-ca >/dev/null 2>&1; then
      keytool -import -trustcacerts -alias local-ca -file /app/local-ca.crt -cacerts -storepass changeit -noprompt;
      fi &&
      java -cp @/app/jib-classpath-file com.ecommerce.api_gateway.ApiGatewayApplication"
  

  # Core service (custom microservice)
  core-service:
    image: aggkov/core-service:latest  # Image built and tagged by Jib
    container_name: core-service
    depends_on:
      - postgres-core
      - flyway
      - kafka
      - discovery-server
      - api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JAVA_OPTS: >
        -Djavax.net.ssl.trustStore=/app/custom-truststore.jks
        -Djavax.net.ssl.trustStorePassword=changeit
        -Djavax.net.debug=ssl
      KAFKA_BROKER: kafka:9092  # core-service cannot reach localhost:9092 inside its container. It needs to communicate with the kafka container using its service name (kafka).
    ports:
      - "8444:8444"
    volumes:
      - ./backend/core-service/src/main/resources/certs/core-service.p12:/certs/core-service.p12 # SSL certificates
      - ./backend/core-service/uploads:/core-service/uploads # Map uploads directory
      - ./custom-truststore.jks:/app/custom-truststore.jks
      - ./local-ca.crt:/app/local-ca.crt  # Mount local-ca.crt
    entrypoint: >
      sh -c "
      if ! keytool -list -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit -alias local-ca >/dev/null 2>&1; then
        keytool -import -trustcacerts -alias local-ca -file /app/local-ca.crt -cacerts -storepass changeit -noprompt;
      fi &&
      java -cp @/app/jib-classpath-file com.ecommerce.core.CoreApplication"

  # Payment Service
  payment-service:
    image: aggkov/payment-service:latest
    container_name: payment-service
    depends_on:
      - postgres-payment
      - discovery-server
      - api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JAVA_OPTS: >
        -Djavax.net.ssl.trustStore=/app/custom-truststore.jks
        -Djavax.net.ssl.trustStorePassword=changeit
    ports:
      - "8445:8445"
    volumes:
      - ./backend/payment-service/src/main/resources/certs/payment-service.p12:/certs/payment-service.p12  # SSL certificates
      - ./custom-truststore.jks:/app/custom-truststore.jks
      - ./local-ca.crt:/app/local-ca.crt  # Mount local-ca.crt
    entrypoint: >
      sh -c "
      if ! keytool -list -keystore /opt/java/openjdk/lib/security/cacerts -storepass changeit -alias local-ca >/dev/null 2>&1; then
      keytool -import -trustcacerts -alias local-ca -file /app/local-ca.crt -cacerts -storepass changeit -noprompt;
      fi && java -cp @/app/jib-classpath-file com.ecommerce.payment.PaymentApplication"

  # Notification Service
  notification-service:
    image: aggkov/notification-service:latest
    container_name: notification-service
    depends_on:
      - kafka
      - discovery-server
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BROKER: kafka:9092
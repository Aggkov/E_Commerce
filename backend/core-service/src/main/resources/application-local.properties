# Database Configuration
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/e-commerce
spring.datasource.username=ecommerce_user
spring.datasource.password=ecommerce_user
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Application and Eureka Configuration
#spring.application.name=core-service
#server.servlet.context-path=/api/v1/core
eureka.instance.prefer-ip-address=false
eureka.instance.hostname=localhost
eureka.instance.ip-address=127.0.0.1
eureka.client.serviceUrl.defaultZone=https://localhost:8761/eureka/
eureka.instance.secure-port-enabled=true
#eureka.instance.secure-port=8444
eureka.instance.non-secure-port-enabled=false
#eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.hostname}:${server.port}

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.baselineOnMigrate=false
# Flyway's default location for migrations
spring.flyway.locations=classpath:sql/migration
#flyway migrate script
#flyway -url=jdbc:postgresql://localhost:5432/e-commerce -user=ecommerce_user -password=ecommerce_user -locations=filesystem:Absolute path to location for migrations \src\main\resources\sql\migration migrate


# Security and OAuth2 Configuration
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://localhost:9090/realms/E-Commerce/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.issuer-uri=https://localhost:9090/realms/E-Commerce

# Server Port and SSL Configuration
#server.port=8444
server.ssl.enabled=true
server.ssl.key-store=classpath:certs/core-service.p12
server.ssl.key-store-password=changeit
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=core-service

# Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ecommerce.core.kafka.OrderSuccessEvent,orderInfo:com.ecommerce.core.dto.request.OrderInfoDTO,orderItem:com.ecommerce.core.dto.request.OrderItemDTO,user:com.ecommerce.core.dto.response.UserDTO,shippingAddress:com.ecommerce.core.dto.request.ShippingAddressDTO,billingAddress:com.ecommerce.core.dto.request.BillingAddressDTO,state:com.ecommerce.core.dto.response.StateDTO
# 2MB
spring.kafka.producer.properties.max.request.size=2097152

# Development Tools and Logging
spring.devtools.livereload.port=0
spring.devtools.restart.enabled=true
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=500
logging.level.org.springframework.boot.devtools=DEBUG

# Documentation and Swagger
springdoc.api-docs.path=/api-docs
# Swagger UI URL: http://localhost:8444/api/v1/core/swagger-ui/index.html

# File Upload Configuration
#file.upload-dir=${user.dir}

# CORS Configuration
allowed.origins=https://localhost:4200
payment.service.url=https://localhost:8445

##spring.jpa.show-sql=true
##spring.jpa.properties.hibernate.format_sql=true
##logging.level.org.hibernate.SQL=DEBUG
#
##DDL Auto Configuration: The ddl-auto setting (update, create, create-drop, or none) \
##  determines how Hibernate handles schema updates. Be cautious with create or create-drop in production \
##  as they can lead to data loss.
## or configure flyway and set it to none V1__<name.sql>

#springdoc.swagger-ui.path=/api/v1/swagger-ui
#
##logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#

##spring.datasource.initialization-mode=always
##spring.datasource.initialize=true

#create a keystore with a self-signed certificate
#keytool -genkeypair -alias core -keyalg RSA -keysize 2048 -validity 365 -keystore core-keystore.p12 -storetype PKCS12 -dname "CN=localhost" -storepass secret -keypass secret

#To allow Gateway to trust Core, export the certificate as core-cert.crt
#keytool -export -alias core -keystore core-keystore.p12 -file core-cert.crt -storepass secret -rfc

#Import Core Certificate into cacerts
#keytool -importcert -trustcacerts -alias core-cert -file ./core-service/src/main/resources/core-cert.crt -keystore "C:\Program Files\Java\Java_17\jdk-17.0.2\lib\security\cacerts" -storepass changeit





